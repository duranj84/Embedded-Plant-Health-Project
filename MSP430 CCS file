#include <msp430.h>

void gpioInit();        // Setup the GPIO Pins for controlling the LEDS through PWM (no input arguments)
void I2CInit();         // Setup I2C
void timerInit();       // Setup Timer to control the LEDS (no input arguments)
void adcInit();         // Setup ADC to do single, on demand samples (no input arguments)
float readADCSingle();    // Single Read ADC, no input arguments, returns current ADC reading
float calcLight(float Val);
float LDR_Val, tempReading, humidReading;
float Light = 0;
/**
 * main.c
 */

int main(void){
    WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;

    gpioInit();
    adcInit();
    timerInit();
    I2CInit();
    while(1){

        LDR_Val = readADCSingle();
        Light = calcLight(LDR_Val);


            }

    return 0;
}
    /**
     * GPIO INIT
     * Initialize all GPIO Pins. Current Pin configuration:
     * Pin 5.2: INPUT,  ADC Channel 10
     */


void gpioInit(){

    // Configure ADC Pin
    P5SEL0 |= BIT2;
    P5SEL1 |= BIT2;


}


    /**
     * Timer INIT
     * Initialize the Timer Peripheral to control a GPIO Pin with PWM in up mode
     * Timer Mode: Up Mode
     */
void timerInit(){
    // Configure Timer Module to Up Mode
    // Configure CCR Registers

    TB3CCR0 = 1000-1;                         // PWM Period
    TB3CCTL1 = OUTMOD_7;                      // CCR1 reset/set
    TB3CCR1 = 750;                            // CCR1 PWM duty cycle
    TB3CTL = TBSSEL__SMCLK | MC__UP | TBCLR;  // SMCLK, up mode, clear TBR
}

    /**
     * ADC INIT
     * Initialize the ADC Peripheral to read Single measurements on demand.
     * ADC MODE: Single Sample, Single Conversion
     */
void adcInit(){

    // Configure ADC12
    ADCCTL0 |= ADCSHT_2 | ADCON;                             // ADCON, S&H=16 ADC clks
    ADCCTL1 |= ADCSHP;                                       // ADCCLK = MODOSC; sampling timer
    ADCCTL2 &= ~ADCRES;                                      // clear ADCRES in ADCCTL
    ADCCTL2 |= ADCRES_2;                                     // 12-bit conversion results
    ADCMCTL0 |= ADCINCH_10;                                   // A10 ADC input select; Vref=AVCC
}

void I2CInit(){
    P1SEL0 |= BIT6 | BIT7;                      // P1.6, 1.7 = USCI_B0
    UCB0CTL1 |= UCSWRST;                        // Enable SW reset
    UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;       // I2C Master, synchronous mode
    UCB0CTL1 = UCSSEL_2 + UCSWRST;              // SMCLK
    UCB0BR0 = 12;
    UCB0BR1 = 0;
    UCB0I2CSA = 0xD0;                           // Slave address
    UCB0CTL1 &= ~UCSWRST;                       // Clear SW reset, resume operation
    UCB0IE |= UCTXIE;                           // Enable TX interrupt
    UCB0IE |= UCNACKIE;                         // Enable NACK interrupt
}

    /**
     * Read Single ADC Sample from Channel 10 of the ADC12 Peripheral
     * Returns an ADC Sample without interrupts.
     */
float readADCSingle(){
    ADCCTL0 |= ADCENC | ADCSC;
     while (!(ADCIFG & ADCIFG0));
         return ADCMEM0;   // Wait for sample to be sampled and converted
}

float calcLight(float Val){

    Light = ((Val - 250) / 1800) * 100;

    if (Light < 0)
        Light = 0;

    if (Light > 100)
    Light = 100;

    return Light;
}
